// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
)

type AssignStemcellService struct {
	AssignStemcellStub        func(api.ProductStemcells) error
	assignStemcellMutex       sync.RWMutex
	assignStemcellArgsForCall []struct {
		arg1 api.ProductStemcells
	}
	assignStemcellReturns struct {
		result1 error
	}
	assignStemcellReturnsOnCall map[int]struct {
		result1 error
	}
	ListStemcellsStub        func() (api.ProductStemcells, error)
	listStemcellsMutex       sync.RWMutex
	listStemcellsArgsForCall []struct {
	}
	listStemcellsReturns struct {
		result1 api.ProductStemcells
		result2 error
	}
	listStemcellsReturnsOnCall map[int]struct {
		result1 api.ProductStemcells
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AssignStemcellService) AssignStemcell(arg1 api.ProductStemcells) error {
	fake.assignStemcellMutex.Lock()
	ret, specificReturn := fake.assignStemcellReturnsOnCall[len(fake.assignStemcellArgsForCall)]
	fake.assignStemcellArgsForCall = append(fake.assignStemcellArgsForCall, struct {
		arg1 api.ProductStemcells
	}{arg1})
	fake.recordInvocation("AssignStemcell", []interface{}{arg1})
	fake.assignStemcellMutex.Unlock()
	if fake.AssignStemcellStub != nil {
		return fake.AssignStemcellStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.assignStemcellReturns
	return fakeReturns.result1
}

func (fake *AssignStemcellService) AssignStemcellCallCount() int {
	fake.assignStemcellMutex.RLock()
	defer fake.assignStemcellMutex.RUnlock()
	return len(fake.assignStemcellArgsForCall)
}

func (fake *AssignStemcellService) AssignStemcellCalls(stub func(api.ProductStemcells) error) {
	fake.assignStemcellMutex.Lock()
	defer fake.assignStemcellMutex.Unlock()
	fake.AssignStemcellStub = stub
}

func (fake *AssignStemcellService) AssignStemcellArgsForCall(i int) api.ProductStemcells {
	fake.assignStemcellMutex.RLock()
	defer fake.assignStemcellMutex.RUnlock()
	argsForCall := fake.assignStemcellArgsForCall[i]
	return argsForCall.arg1
}

func (fake *AssignStemcellService) AssignStemcellReturns(result1 error) {
	fake.assignStemcellMutex.Lock()
	defer fake.assignStemcellMutex.Unlock()
	fake.AssignStemcellStub = nil
	fake.assignStemcellReturns = struct {
		result1 error
	}{result1}
}

func (fake *AssignStemcellService) AssignStemcellReturnsOnCall(i int, result1 error) {
	fake.assignStemcellMutex.Lock()
	defer fake.assignStemcellMutex.Unlock()
	fake.AssignStemcellStub = nil
	if fake.assignStemcellReturnsOnCall == nil {
		fake.assignStemcellReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignStemcellReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *AssignStemcellService) ListStemcells() (api.ProductStemcells, error) {
	fake.listStemcellsMutex.Lock()
	ret, specificReturn := fake.listStemcellsReturnsOnCall[len(fake.listStemcellsArgsForCall)]
	fake.listStemcellsArgsForCall = append(fake.listStemcellsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListStemcells", []interface{}{})
	fake.listStemcellsMutex.Unlock()
	if fake.ListStemcellsStub != nil {
		return fake.ListStemcellsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listStemcellsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AssignStemcellService) ListStemcellsCallCount() int {
	fake.listStemcellsMutex.RLock()
	defer fake.listStemcellsMutex.RUnlock()
	return len(fake.listStemcellsArgsForCall)
}

func (fake *AssignStemcellService) ListStemcellsCalls(stub func() (api.ProductStemcells, error)) {
	fake.listStemcellsMutex.Lock()
	defer fake.listStemcellsMutex.Unlock()
	fake.ListStemcellsStub = stub
}

func (fake *AssignStemcellService) ListStemcellsReturns(result1 api.ProductStemcells, result2 error) {
	fake.listStemcellsMutex.Lock()
	defer fake.listStemcellsMutex.Unlock()
	fake.ListStemcellsStub = nil
	fake.listStemcellsReturns = struct {
		result1 api.ProductStemcells
		result2 error
	}{result1, result2}
}

func (fake *AssignStemcellService) ListStemcellsReturnsOnCall(i int, result1 api.ProductStemcells, result2 error) {
	fake.listStemcellsMutex.Lock()
	defer fake.listStemcellsMutex.Unlock()
	fake.ListStemcellsStub = nil
	if fake.listStemcellsReturnsOnCall == nil {
		fake.listStemcellsReturnsOnCall = make(map[int]struct {
			result1 api.ProductStemcells
			result2 error
		})
	}
	fake.listStemcellsReturnsOnCall[i] = struct {
		result1 api.ProductStemcells
		result2 error
	}{result1, result2}
}

func (fake *AssignStemcellService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignStemcellMutex.RLock()
	defer fake.assignStemcellMutex.RUnlock()
	fake.listStemcellsMutex.RLock()
	defer fake.listStemcellsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AssignStemcellService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
