// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
	configparser "github.com/pivotal-cf/om/configparser"
)

type ConfigParser struct {
	ParsePropertiesStub        func(configparser.PropertyName, api.ResponseProperty, configparser.CredentialHandler) (map[string]interface{}, error)
	parsePropertiesMutex       sync.RWMutex
	parsePropertiesArgsForCall []struct {
		arg1 configparser.PropertyName
		arg2 api.ResponseProperty
		arg3 configparser.CredentialHandler
	}
	parsePropertiesReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	parsePropertiesReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ConfigParser) ParseProperties(arg1 configparser.PropertyName, arg2 api.ResponseProperty, arg3 configparser.CredentialHandler) (map[string]interface{}, error) {
	fake.parsePropertiesMutex.Lock()
	ret, specificReturn := fake.parsePropertiesReturnsOnCall[len(fake.parsePropertiesArgsForCall)]
	fake.parsePropertiesArgsForCall = append(fake.parsePropertiesArgsForCall, struct {
		arg1 configparser.PropertyName
		arg2 api.ResponseProperty
		arg3 configparser.CredentialHandler
	}{arg1, arg2, arg3})
	fake.recordInvocation("ParseProperties", []interface{}{arg1, arg2, arg3})
	fake.parsePropertiesMutex.Unlock()
	if fake.ParsePropertiesStub != nil {
		return fake.ParsePropertiesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.parsePropertiesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ConfigParser) ParsePropertiesCallCount() int {
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	return len(fake.parsePropertiesArgsForCall)
}

func (fake *ConfigParser) ParsePropertiesCalls(stub func(configparser.PropertyName, api.ResponseProperty, configparser.CredentialHandler) (map[string]interface{}, error)) {
	fake.parsePropertiesMutex.Lock()
	defer fake.parsePropertiesMutex.Unlock()
	fake.ParsePropertiesStub = stub
}

func (fake *ConfigParser) ParsePropertiesArgsForCall(i int) (configparser.PropertyName, api.ResponseProperty, configparser.CredentialHandler) {
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	argsForCall := fake.parsePropertiesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ConfigParser) ParsePropertiesReturns(result1 map[string]interface{}, result2 error) {
	fake.parsePropertiesMutex.Lock()
	defer fake.parsePropertiesMutex.Unlock()
	fake.ParsePropertiesStub = nil
	fake.parsePropertiesReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *ConfigParser) ParsePropertiesReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.parsePropertiesMutex.Lock()
	defer fake.parsePropertiesMutex.Unlock()
	fake.ParsePropertiesStub = nil
	if fake.parsePropertiesReturnsOnCall == nil {
		fake.parsePropertiesReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.parsePropertiesReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *ConfigParser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.parsePropertiesMutex.RLock()
	defer fake.parsePropertiesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ConfigParser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
