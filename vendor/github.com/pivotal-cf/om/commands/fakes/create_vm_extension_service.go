// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
)

type CreateVMExtensionService struct {
	CreateStagedVMExtensionStub        func(api.CreateVMExtension) error
	createStagedVMExtensionMutex       sync.RWMutex
	createStagedVMExtensionArgsForCall []struct {
		arg1 api.CreateVMExtension
	}
	createStagedVMExtensionReturns struct {
		result1 error
	}
	createStagedVMExtensionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CreateVMExtensionService) CreateStagedVMExtension(arg1 api.CreateVMExtension) error {
	fake.createStagedVMExtensionMutex.Lock()
	ret, specificReturn := fake.createStagedVMExtensionReturnsOnCall[len(fake.createStagedVMExtensionArgsForCall)]
	fake.createStagedVMExtensionArgsForCall = append(fake.createStagedVMExtensionArgsForCall, struct {
		arg1 api.CreateVMExtension
	}{arg1})
	fake.recordInvocation("CreateStagedVMExtension", []interface{}{arg1})
	fake.createStagedVMExtensionMutex.Unlock()
	if fake.CreateStagedVMExtensionStub != nil {
		return fake.CreateStagedVMExtensionStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createStagedVMExtensionReturns
	return fakeReturns.result1
}

func (fake *CreateVMExtensionService) CreateStagedVMExtensionCallCount() int {
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	return len(fake.createStagedVMExtensionArgsForCall)
}

func (fake *CreateVMExtensionService) CreateStagedVMExtensionCalls(stub func(api.CreateVMExtension) error) {
	fake.createStagedVMExtensionMutex.Lock()
	defer fake.createStagedVMExtensionMutex.Unlock()
	fake.CreateStagedVMExtensionStub = stub
}

func (fake *CreateVMExtensionService) CreateStagedVMExtensionArgsForCall(i int) api.CreateVMExtension {
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	argsForCall := fake.createStagedVMExtensionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *CreateVMExtensionService) CreateStagedVMExtensionReturns(result1 error) {
	fake.createStagedVMExtensionMutex.Lock()
	defer fake.createStagedVMExtensionMutex.Unlock()
	fake.CreateStagedVMExtensionStub = nil
	fake.createStagedVMExtensionReturns = struct {
		result1 error
	}{result1}
}

func (fake *CreateVMExtensionService) CreateStagedVMExtensionReturnsOnCall(i int, result1 error) {
	fake.createStagedVMExtensionMutex.Lock()
	defer fake.createStagedVMExtensionMutex.Unlock()
	fake.CreateStagedVMExtensionStub = nil
	if fake.createStagedVMExtensionReturnsOnCall == nil {
		fake.createStagedVMExtensionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createStagedVMExtensionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CreateVMExtensionService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createStagedVMExtensionMutex.RLock()
	defer fake.createStagedVMExtensionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CreateVMExtensionService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
