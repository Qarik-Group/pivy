// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
)

type AvailableProductsService struct {
	ListAvailableProductsStub        func() (api.AvailableProductsOutput, error)
	listAvailableProductsMutex       sync.RWMutex
	listAvailableProductsArgsForCall []struct {
	}
	listAvailableProductsReturns struct {
		result1 api.AvailableProductsOutput
		result2 error
	}
	listAvailableProductsReturnsOnCall map[int]struct {
		result1 api.AvailableProductsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *AvailableProductsService) ListAvailableProducts() (api.AvailableProductsOutput, error) {
	fake.listAvailableProductsMutex.Lock()
	ret, specificReturn := fake.listAvailableProductsReturnsOnCall[len(fake.listAvailableProductsArgsForCall)]
	fake.listAvailableProductsArgsForCall = append(fake.listAvailableProductsArgsForCall, struct {
	}{})
	fake.recordInvocation("ListAvailableProducts", []interface{}{})
	fake.listAvailableProductsMutex.Unlock()
	if fake.ListAvailableProductsStub != nil {
		return fake.ListAvailableProductsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAvailableProductsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *AvailableProductsService) ListAvailableProductsCallCount() int {
	fake.listAvailableProductsMutex.RLock()
	defer fake.listAvailableProductsMutex.RUnlock()
	return len(fake.listAvailableProductsArgsForCall)
}

func (fake *AvailableProductsService) ListAvailableProductsCalls(stub func() (api.AvailableProductsOutput, error)) {
	fake.listAvailableProductsMutex.Lock()
	defer fake.listAvailableProductsMutex.Unlock()
	fake.ListAvailableProductsStub = stub
}

func (fake *AvailableProductsService) ListAvailableProductsReturns(result1 api.AvailableProductsOutput, result2 error) {
	fake.listAvailableProductsMutex.Lock()
	defer fake.listAvailableProductsMutex.Unlock()
	fake.ListAvailableProductsStub = nil
	fake.listAvailableProductsReturns = struct {
		result1 api.AvailableProductsOutput
		result2 error
	}{result1, result2}
}

func (fake *AvailableProductsService) ListAvailableProductsReturnsOnCall(i int, result1 api.AvailableProductsOutput, result2 error) {
	fake.listAvailableProductsMutex.Lock()
	defer fake.listAvailableProductsMutex.Unlock()
	fake.ListAvailableProductsStub = nil
	if fake.listAvailableProductsReturnsOnCall == nil {
		fake.listAvailableProductsReturnsOnCall = make(map[int]struct {
			result1 api.AvailableProductsOutput
			result2 error
		})
	}
	fake.listAvailableProductsReturnsOnCall[i] = struct {
		result1 api.AvailableProductsOutput
		result2 error
	}{result1, result2}
}

func (fake *AvailableProductsService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listAvailableProductsMutex.RLock()
	defer fake.listAvailableProductsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *AvailableProductsService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
