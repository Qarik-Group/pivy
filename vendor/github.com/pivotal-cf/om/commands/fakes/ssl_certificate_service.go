// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
)

type SSLCertificateService struct {
	GetSSLCertificateStub        func() (api.SSLCertificateOutput, error)
	getSSLCertificateMutex       sync.RWMutex
	getSSLCertificateArgsForCall []struct {
	}
	getSSLCertificateReturns struct {
		result1 api.SSLCertificateOutput
		result2 error
	}
	getSSLCertificateReturnsOnCall map[int]struct {
		result1 api.SSLCertificateOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *SSLCertificateService) GetSSLCertificate() (api.SSLCertificateOutput, error) {
	fake.getSSLCertificateMutex.Lock()
	ret, specificReturn := fake.getSSLCertificateReturnsOnCall[len(fake.getSSLCertificateArgsForCall)]
	fake.getSSLCertificateArgsForCall = append(fake.getSSLCertificateArgsForCall, struct {
	}{})
	fake.recordInvocation("GetSSLCertificate", []interface{}{})
	fake.getSSLCertificateMutex.Unlock()
	if fake.GetSSLCertificateStub != nil {
		return fake.GetSSLCertificateStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSSLCertificateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *SSLCertificateService) GetSSLCertificateCallCount() int {
	fake.getSSLCertificateMutex.RLock()
	defer fake.getSSLCertificateMutex.RUnlock()
	return len(fake.getSSLCertificateArgsForCall)
}

func (fake *SSLCertificateService) GetSSLCertificateCalls(stub func() (api.SSLCertificateOutput, error)) {
	fake.getSSLCertificateMutex.Lock()
	defer fake.getSSLCertificateMutex.Unlock()
	fake.GetSSLCertificateStub = stub
}

func (fake *SSLCertificateService) GetSSLCertificateReturns(result1 api.SSLCertificateOutput, result2 error) {
	fake.getSSLCertificateMutex.Lock()
	defer fake.getSSLCertificateMutex.Unlock()
	fake.GetSSLCertificateStub = nil
	fake.getSSLCertificateReturns = struct {
		result1 api.SSLCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *SSLCertificateService) GetSSLCertificateReturnsOnCall(i int, result1 api.SSLCertificateOutput, result2 error) {
	fake.getSSLCertificateMutex.Lock()
	defer fake.getSSLCertificateMutex.Unlock()
	fake.GetSSLCertificateStub = nil
	if fake.getSSLCertificateReturnsOnCall == nil {
		fake.getSSLCertificateReturnsOnCall = make(map[int]struct {
			result1 api.SSLCertificateOutput
			result2 error
		})
	}
	fake.getSSLCertificateReturnsOnCall[i] = struct {
		result1 api.SSLCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *SSLCertificateService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getSSLCertificateMutex.RLock()
	defer fake.getSSLCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *SSLCertificateService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
