// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"

	api "github.com/pivotal-cf/om/api"
)

type UnstageProductService struct {
	DeleteStagedProductStub        func(api.UnstageProductInput) error
	deleteStagedProductMutex       sync.RWMutex
	deleteStagedProductArgsForCall []struct {
		arg1 api.UnstageProductInput
	}
	deleteStagedProductReturns struct {
		result1 error
	}
	deleteStagedProductReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *UnstageProductService) DeleteStagedProduct(arg1 api.UnstageProductInput) error {
	fake.deleteStagedProductMutex.Lock()
	ret, specificReturn := fake.deleteStagedProductReturnsOnCall[len(fake.deleteStagedProductArgsForCall)]
	fake.deleteStagedProductArgsForCall = append(fake.deleteStagedProductArgsForCall, struct {
		arg1 api.UnstageProductInput
	}{arg1})
	fake.recordInvocation("DeleteStagedProduct", []interface{}{arg1})
	fake.deleteStagedProductMutex.Unlock()
	if fake.DeleteStagedProductStub != nil {
		return fake.DeleteStagedProductStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteStagedProductReturns
	return fakeReturns.result1
}

func (fake *UnstageProductService) DeleteStagedProductCallCount() int {
	fake.deleteStagedProductMutex.RLock()
	defer fake.deleteStagedProductMutex.RUnlock()
	return len(fake.deleteStagedProductArgsForCall)
}

func (fake *UnstageProductService) DeleteStagedProductCalls(stub func(api.UnstageProductInput) error) {
	fake.deleteStagedProductMutex.Lock()
	defer fake.deleteStagedProductMutex.Unlock()
	fake.DeleteStagedProductStub = stub
}

func (fake *UnstageProductService) DeleteStagedProductArgsForCall(i int) api.UnstageProductInput {
	fake.deleteStagedProductMutex.RLock()
	defer fake.deleteStagedProductMutex.RUnlock()
	argsForCall := fake.deleteStagedProductArgsForCall[i]
	return argsForCall.arg1
}

func (fake *UnstageProductService) DeleteStagedProductReturns(result1 error) {
	fake.deleteStagedProductMutex.Lock()
	defer fake.deleteStagedProductMutex.Unlock()
	fake.DeleteStagedProductStub = nil
	fake.deleteStagedProductReturns = struct {
		result1 error
	}{result1}
}

func (fake *UnstageProductService) DeleteStagedProductReturnsOnCall(i int, result1 error) {
	fake.deleteStagedProductMutex.Lock()
	defer fake.deleteStagedProductMutex.Unlock()
	fake.DeleteStagedProductStub = nil
	if fake.deleteStagedProductReturnsOnCall == nil {
		fake.deleteStagedProductReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteStagedProductReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *UnstageProductService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteStagedProductMutex.RLock()
	defer fake.deleteStagedProductMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *UnstageProductService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
