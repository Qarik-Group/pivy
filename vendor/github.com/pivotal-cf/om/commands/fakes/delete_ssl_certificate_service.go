// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"
)

type DeleteSSLCertificateService struct {
	DeleteSSLCertificateStub        func() error
	deleteSSLCertificateMutex       sync.RWMutex
	deleteSSLCertificateArgsForCall []struct {
	}
	deleteSSLCertificateReturns struct {
		result1 error
	}
	deleteSSLCertificateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *DeleteSSLCertificateService) DeleteSSLCertificate() error {
	fake.deleteSSLCertificateMutex.Lock()
	ret, specificReturn := fake.deleteSSLCertificateReturnsOnCall[len(fake.deleteSSLCertificateArgsForCall)]
	fake.deleteSSLCertificateArgsForCall = append(fake.deleteSSLCertificateArgsForCall, struct {
	}{})
	fake.recordInvocation("DeleteSSLCertificate", []interface{}{})
	fake.deleteSSLCertificateMutex.Unlock()
	if fake.DeleteSSLCertificateStub != nil {
		return fake.DeleteSSLCertificateStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteSSLCertificateReturns
	return fakeReturns.result1
}

func (fake *DeleteSSLCertificateService) DeleteSSLCertificateCallCount() int {
	fake.deleteSSLCertificateMutex.RLock()
	defer fake.deleteSSLCertificateMutex.RUnlock()
	return len(fake.deleteSSLCertificateArgsForCall)
}

func (fake *DeleteSSLCertificateService) DeleteSSLCertificateCalls(stub func() error) {
	fake.deleteSSLCertificateMutex.Lock()
	defer fake.deleteSSLCertificateMutex.Unlock()
	fake.DeleteSSLCertificateStub = stub
}

func (fake *DeleteSSLCertificateService) DeleteSSLCertificateReturns(result1 error) {
	fake.deleteSSLCertificateMutex.Lock()
	defer fake.deleteSSLCertificateMutex.Unlock()
	fake.DeleteSSLCertificateStub = nil
	fake.deleteSSLCertificateReturns = struct {
		result1 error
	}{result1}
}

func (fake *DeleteSSLCertificateService) DeleteSSLCertificateReturnsOnCall(i int, result1 error) {
	fake.deleteSSLCertificateMutex.Lock()
	defer fake.deleteSSLCertificateMutex.Unlock()
	fake.DeleteSSLCertificateStub = nil
	if fake.deleteSSLCertificateReturnsOnCall == nil {
		fake.deleteSSLCertificateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSSLCertificateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *DeleteSSLCertificateService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteSSLCertificateMutex.RLock()
	defer fake.deleteSSLCertificateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *DeleteSSLCertificateService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
