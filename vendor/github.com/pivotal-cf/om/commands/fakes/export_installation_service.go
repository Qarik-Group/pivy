// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	sync "sync"
)

type ExportInstallationService struct {
	DownloadInstallationAssetCollectionStub        func(string, int) error
	downloadInstallationAssetCollectionMutex       sync.RWMutex
	downloadInstallationAssetCollectionArgsForCall []struct {
		arg1 string
		arg2 int
	}
	downloadInstallationAssetCollectionReturns struct {
		result1 error
	}
	downloadInstallationAssetCollectionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollection(arg1 string, arg2 int) error {
	fake.downloadInstallationAssetCollectionMutex.Lock()
	ret, specificReturn := fake.downloadInstallationAssetCollectionReturnsOnCall[len(fake.downloadInstallationAssetCollectionArgsForCall)]
	fake.downloadInstallationAssetCollectionArgsForCall = append(fake.downloadInstallationAssetCollectionArgsForCall, struct {
		arg1 string
		arg2 int
	}{arg1, arg2})
	fake.recordInvocation("DownloadInstallationAssetCollection", []interface{}{arg1, arg2})
	fake.downloadInstallationAssetCollectionMutex.Unlock()
	if fake.DownloadInstallationAssetCollectionStub != nil {
		return fake.DownloadInstallationAssetCollectionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.downloadInstallationAssetCollectionReturns
	return fakeReturns.result1
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollectionCallCount() int {
	fake.downloadInstallationAssetCollectionMutex.RLock()
	defer fake.downloadInstallationAssetCollectionMutex.RUnlock()
	return len(fake.downloadInstallationAssetCollectionArgsForCall)
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollectionCalls(stub func(string, int) error) {
	fake.downloadInstallationAssetCollectionMutex.Lock()
	defer fake.downloadInstallationAssetCollectionMutex.Unlock()
	fake.DownloadInstallationAssetCollectionStub = stub
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollectionArgsForCall(i int) (string, int) {
	fake.downloadInstallationAssetCollectionMutex.RLock()
	defer fake.downloadInstallationAssetCollectionMutex.RUnlock()
	argsForCall := fake.downloadInstallationAssetCollectionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollectionReturns(result1 error) {
	fake.downloadInstallationAssetCollectionMutex.Lock()
	defer fake.downloadInstallationAssetCollectionMutex.Unlock()
	fake.DownloadInstallationAssetCollectionStub = nil
	fake.downloadInstallationAssetCollectionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ExportInstallationService) DownloadInstallationAssetCollectionReturnsOnCall(i int, result1 error) {
	fake.downloadInstallationAssetCollectionMutex.Lock()
	defer fake.downloadInstallationAssetCollectionMutex.Unlock()
	fake.DownloadInstallationAssetCollectionStub = nil
	if fake.downloadInstallationAssetCollectionReturnsOnCall == nil {
		fake.downloadInstallationAssetCollectionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadInstallationAssetCollectionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ExportInstallationService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadInstallationAssetCollectionMutex.RLock()
	defer fake.downloadInstallationAssetCollectionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ExportInstallationService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
